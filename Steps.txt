---> Install react + vite
   -> npm create vite@latest folder_name

---> Install tailwind 
   -> npm install -D tailwindcss postcss autoprefixer
   -> npx tailwindcss init -p

   go to tailwind.config.js file and configure content filed to allow on which type of file tailwind is allowed in this application
   go to index.css and config tailwind there as well 3 lines 
   go to tailwind.config.js set extended 

start the application again

---> Install react-touter dom
   create routes

---> create navbar Page

---> create Login Page
   -> handle invalid email and password length 
   -> handle error show on interface and remove it after 7 second using useEffect ,setTimeOut and clearInterval function 
   -> add feature of show password and hide password using react icon

---> create Signup Page 
   -> all features we used in login page same here 

---> Navbar Page for Home Page 
   -> adding Search functionality (LEFT)
   -> adding Logout and User Profile Icon functionality 

--->Creating Note Card
--->Create addEditNotes
    -> use react-model library to make addEditNote form type
    -> tags Element how to show old tags + new tags just above the input Element
    -> close button of form 
    -> edit/add button of form using prop drilling which one we have to choose to perform action either add/edit


####################################backend##################################

---> backend setup 
      -> install all library
      -> setup in app.js
        -> configure express , mongoose
        -> connect server , mongodb 
      -> create user model
      -> create routes for user 
         -> install bycryptjs for encryption and descryption and configure it in userRoute
            use it in userRoute then use function const hashPass = await byc.hash(pass,10);
         -> install npm i cookie-parser to access user cookie and configure it in app.js and userRoute
         -> install jsonwebtoken 
            -> configure it in userRoute and check futher process there
     
   -> status codes :- https://developer.mozilla.org/en-US/docs/Web/HTTP/Status
      // depend upon organization which one they will use among each range
      Informational responses (100 – 199)
      Successful responses (200 – 299) 
      Redirection messages (300 – 399)
      Client error responses (400 – 499) // agar client ke data me kuch gadbad hai
      Server error responses (500 – 599) // agar server side kuch gadbad hui hai

       // always use return while sending error otherwise server try to send below response as well which crash it 
       return res.status.json .... 

 -> cookie cookie-manager me store hai thunder client k jab login krte hai tab ho rhi hai store